// Generated by CoffeeScript 1.9.2
(function() {
  var ExpressGracefulShutdown, _, createDomain, onFinished, reqId,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  createDomain = require('domain').create;

  _ = require('lodash');

  onFinished = require('on-finished');

  ExpressGracefulShutdown = (function() {
    function ExpressGracefulShutdown(options) {
      this.requestFinishHandler = bind(this.requestFinishHandler, this);
      this.middleware = bind(this.middleware, this);
      this.domainEnabled = options.domainEnabled;
      this.domainIdFunc = options.domainIdFunc;
      this.onExceptionFn = options.onExceptionFn;
      this.shutdownGraceSeconds = options.shutdownGraceSeconds;
      this.inShutdownRespondWithStatus = options.inShutdownRespondWithStatus;
      this.gracefulShutdownMode = false;
      this.pendingRequestsCount = 0;
      this.pendingExceptionsCount = 0;
      process.on('uncaughtException', this.exceptionHandler());
    }

    ExpressGracefulShutdown.prototype.middleware = function() {
      return (function(_this) {
        return function(req, res, next) {
          var domain;
          domain = _this.bindReqResToDomain(req, res);
          _this.pendingRequestsCount += 1;
          onFinished(res, _this.requestFinishHandler);
          if (_this.gracefulShutdownMode) {
            return res.sendStatus(_this.inShutdownRespondWithStatus);
          }
          return _this.runCallbackInDomain(domain, next);
        };
      })(this);
    };

    ExpressGracefulShutdown.prototype.bindReqResToDomain = function(req, res) {
      var domain;
      if (!this.domainEnabled) {
        return;
      }
      domain = createDomain();
      domain.id = this.domainIdFunc(req);
      domain.add(req);
      domain.add(res);
      domain.on('error', this.exceptionHandler(res));
      return domain;
    };

    ExpressGracefulShutdown.prototype.runCallbackInDomain = function(domain, callback) {
      if (domain == null) {
        return callback();
      }
      return domain.run(function() {
        return callback();
      });
    };

    ExpressGracefulShutdown.prototype.exceptionHandler = function(res) {
      return (function(_this) {
        return function(exc) {
          if (res) {
            if (res != null ? res.exceptionHandledInGracefulShutdown : void 0) {
              return;
            }
            res.exceptionHandledInGracefulShutdown = true;
          }
          if (res && !res.headersSent) {
            res.sendStatus(500);
          } else {
            _this.pendingRequestsCount -= 1;
          }
          _this.gracefulShutdownMode = true;
          _this.startHardKillTimer();
          _this.pendingExceptionsCount += 1;
          return _this.onExceptionFn(exc, function() {
            _this.pendingExceptionsCount -= 1;
            return _this.applyKillConditions();
          });
        };
      })(this);
    };

    ExpressGracefulShutdown.prototype.requestFinishHandler = function() {
      this.pendingRequestsCount -= 1;
      return this.applyKillConditions();
    };

    ExpressGracefulShutdown.prototype.startHardKillTimer = function() {
      if (this.hardKillTimer != null) {
        return;
      }
      return this.hardKillTimer = setTimeout((function(_this) {
        return function() {
          return _this.killProcess();
        };
      })(this), this.shutdownGraceSeconds * 1000);
    };

    ExpressGracefulShutdown.prototype.applyKillConditions = function() {
      if (!this.gracefulShutdownMode) {
        return;
      }
      if (this.pendingRequestsCount > 0) {
        return;
      }
      if (this.pendingExceptionsCount > 0) {
        return;
      }
      return this.killProcess();
    };

    ExpressGracefulShutdown.prototype.killProcess = function() {
      return process.exit(1);
    };

    return ExpressGracefulShutdown;

  })();

  reqId = 0;

  module.exports = function(options) {
    var defaultOptions;
    defaultOptions = {
      domainEnabled: true,
      domainIdFunc: function(req) {
        return reqId++;
      },
      onExceptionFn: function(exc, callback) {
        console.error(exc);
        return callback();
      },
      shutdownGraceSeconds: 15,
      inShutdownRespondWithStatus: 503
    };
    return new ExpressGracefulShutdown(_.assign(defaultOptions, options)).middleware();
  };

}).call(this);
